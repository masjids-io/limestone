syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

package limestone;

option go_package = "github.com/mnadev/limestone/internal/transport/grpc";

service EventService {
  // Creates a event in the database.
  rpc CreateEvent(CreateEventRequest) returns (Event) {
    option (google.api.http) = {
      post: "/v1/events"
      body: "event"
    };
    option (google.api.method_signature) = "event";
  }
  // Updates a event in the database with the corresponding id to the given
  // event (i.e. all fields are overwritten).
  rpc UpdateEvent(UpdateEventRequest) returns (Event) {
    option (google.api.http) = {
      patch: "/v1/{event.id=events/*}"
      body: "event"
    };
    option (google.api.method_signature) = "event";
  }
  // Deletes a event from the database with the given id.
  rpc DeleteEvent(DeleteEventRequest) returns (DeleteEventResponse) {
    option (google.api.http) = {
      delete: "/v1/{id=events/*}"
    };
    option (google.api.method_signature) = "id";
  }
  // Gets a event from the database with the given id.
  rpc GetEvent(GetEventRequest) returns (Event) {
    option (google.api.http) = {
      get: "/v1/{id=events/*}"
    };
    option (google.api.method_signature) = "id";
  }
  // Returns a paginated list of events from the database.
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {
    option (google.api.http) = {
      get: "/v1/events"
    };
  }
}

message Event {
  // The unique id associated with the event.
  string id = 1;
  // The id of the organization which owns the event.
  string organization_id = 3;

  // The name of the event.
  string name = 4;
  // The description of the event.
  string description = 5;

  // The start time of the event.
  google.protobuf.Timestamp start_time = 6;
  // The end time of the event.
  google.protobuf.Timestamp end_time = 7;

  // Specifies the gender restriction associated with the event.
  enum GenderRestriction {
    // No restriction on gender for event, aka co-ed.
    NO_RESTRICTION = 0;
    // Male only event.
    MALE_ONLY = 1;
    // Female only event.
    FEMALE_ONLY = 2;
  }
  // The gender restriction associated with the event.
  GenderRestriction gender_restriction = 8;

  // Specifies the different event types an event can be specified as.
  enum EventType {
    // The event is a worship event such as Eid salah.
    WORSHIP = 0;
    // The event is an educational event such as a class or lecture.
    EDUCATIONAL = 1;
    // The event is a social community event.
    COMMUNITY = 2;
    // The event is an athletic event such as fitness class or a sports game.
    ATHLETIC = 3;
    // The event is related to fundraising.
    FUNDRAISING = 4;
    // The event is relevant to the youth.
    YOUTH = 5;
    // The event is specific to children.
    CHILDREN_SPECIFIC = 6;
    // The event is related to marriage.
    MATRIMONIAL = 7;
    // The event is a funeral.
    FUNERAL = 8;
  }
  // The different event types associated with this event.
  repeated EventType types = 9;
  // Whether or not the event is a paid event.
  bool is_paid = 10;
  // Whether or not the event requires RSVP.
  bool requires_rsvp = 11;
  // The maximum number of participants for this event. If set to -1, then there
  // is no limit on the number of participants.
  int32 max_participants = 12;
  // The livestream link for this event. If empty, then there is no livestream
  // associated with the event.
  string livestream_link = 13;
  // The create time of the event. This field is output only.
  google.protobuf.Timestamp create_time = 14;
  // The update time of the event. This field is output only.
  google.protobuf.Timestamp update_time = 15;
}

message CreateEventRequest {
  // The event to create in the database.
  Event event = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateEventRequest {
  // The event to update in the database.
  //
  // The event's `id` field is used to identify the book to update.
  // Format: events/{event}
  Event event = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteEventRequest {
  // The id of the event that should be deleted.
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteEventResponse {}

message GetEventRequest {
  // The id of the event that should be returned.
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListEventsRequest {
  // The maximum number of events to return. Fewer events might be returned.
  // Default value is 25.
  int32 page_size = 2;

  // A page token from a previous `ListEvents` call. If this is provided, then the 
  // next page will be returned.
  string page_token = 3;
}

message ListEventsResponse {
  // The list of returned events.
  repeated Event events = 1;
}