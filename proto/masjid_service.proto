syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

package limestone;

option go_package = "github.com/mnadev/limestone/proto";

service MasjidService {
	// Creates a masjid in the database.
	rpc CreateMasjid(CreateMasjidRequest) returns (Masjid) {
    option (google.api.http) = {
      post: "/v1/masjids"
      body: "masjid"
    };
    option (google.api.method_signature) = "masjid";
	}
	// Updates a masjid in the database with the corresponding id to the given
	// masjid (i.e. all fields are overwritten).
	rpc UpdateMasjid(UpdateMasjidRequest) returns (Masjid) {
    option (google.api.http) = {
      patch: "/v1/{masjid.id=masjids/*}"
      body: "masjid"
    };
    option (google.api.method_signature) = "masjid";
	}
	// Deletes a masjid from the database with the given id.
	rpc DeleteMasjid(DeleteMasjidRequest) returns (DeleteMasjidResponse) {
    option (google.api.http) = {
      delete: "/v1/{id=masjids/*}"
    };
    option (google.api.method_signature) = "id";
	}
	// Gets a masjid from the database with the given id.
	rpc GetMasjid(GetMasjidRequest) returns (Masjid) {
    option (google.api.http) = {
      get: "/v1/{id=masjids/*}"
    };
    option (google.api.method_signature) = "id";
	}
	// Returns a paginated list of masjids from the database.
	rpc ListMasjids(ListMasjidsRequest) returns (ListMasjidsResponse) {
    option (google.api.http) = {
      get: "/v1/masjids"
    };
	}
}

// A message that holds prayer times configuration. This message contains all the fields
// necessary to calculate prayer times.
message PrayerTimesConfiguration {
	// Defines the calculation method to use. If this field is set (excluding OTHER), then the Fajr 
	// and Isha angle fields are automatically set.
	enum CalculationMethod {
		// A custom calculation method.
		OTHER = 0;
		// Muslim World League
		// Uses Fajr angle of 18 and an Isha angle of 17
		MUSLIM_WORLD_LEAGUE = 1;
		// Egyptian General Authority of Survey
		// Uses Fajr angle of 19.5 and an Isha angle of 17.5
		EGYPTIAN = 2;
		// University of Islamic Sciences, Karachi
		// Uses Fajr angle of 18 and an Isha angle of 18
		KARACHI = 3;
		// Umm al-Qura University, Makkah
		// Uses a Fajr angle of 18.5 and an Isha angle of 90. Note: You should add a +30 minute custom
		// adjustment of Isha during Ramadan.
		UMM_AL_QURA = 4;
		// The Gulf Region
		// Uses Fajr and Isha angles of 18.2 degrees.
		DUBAI = 5;
		// Moonsighting Committee
		// Uses a Fajr angle of 18 and an Isha angle of 18. Also uses seasonal adjustment values.
		MOON_SIGHTING_COMMITTEE = 6;
		// Referred to as the ISNA method
		// This method is included for completeness, but is not recommended.
		// Uses a Fajr angle of 15 and an Isha angle of 15.
		NORTH_AMERICA = 7;
		// Kuwait
		// Uses a Fajr angle of 18 and an Isha angle of 17.5
		KUWAIT = 8;
		// Qatar
		// Modified version of Umm al-Qura that uses a Fajr angle of 18.
		QATAR = 9;
		// Singapore
		// Uses a Fajr angle of 20 and an Isha angle of 18
		SINGAPORE = 10;
		// UOIF
		// Uses a Fajr angle of 12 and an Isha angle of 12
		UOIF  = 11;
	} 

	// The Juristic method to use for calculating Asr prayer times.
	enum AsrJuristicMethod {
		// Use the Shafi/Hanbali/Maliki method to calculate Asr timings.
		SHAFI_HANBALI_MALIKI = 0;
		// Use the Hanafi method to calculate Asr timings.
		HANAFI = 1;
	}

	// The high latitude rule for calculating Fajr and Isha prayers.
	enum HighLatitudeRule {
		NO_HIGH_LATITUDE_RULE = 0;
		// Fajr will never be earlier than the middle of the night, and Isha will never be later than
		// the middle of the night.
		MIDDLE_OF_THE_NIGHT = 1;
		// Fajr will never be earlier than the beginning of the last seventh of the night, and Isha will
		// never be later than the end of the first seventh of the night.
		SEVENTH_OF_THE_NIGHT = 2;
		// Similar to SEVENTH_OF_THE_NIGHT, but instead of 1/7th, the fraction of the night used
		// is fajr_angle / 60 and isha_angle / 60.
		TWILIGHT_ANGLE = 3;
	}

	// The manual adjustments to apply to the prayer timings. The value that each field is set to is 
	// the offset which will be added to the calculated time to obtain the final prayer time.
	message PrayerAdjustments {
		// Adjustment offset for Fajr in minutes. Value can be negative.
		int32 fajr_adjustment = 1;
		// Adjustment offset for Dhuhr in minutes. Value can be negative.
		int32 dhuhr_adjustment = 2;
		// Adjustment offset for Asr in minutes. Value can be negative.
		int32 asr_adjustment = 3;
		// Adjustment offset for Maghrib in minutes. Value can be negative.
		int32 maghrib_adjustment = 4;
		// Adjustment offset for Isha in minutes. Value can be negative.
		int32 isha_adjustment = 5;
	}

	// The calculation method to use.
	CalculationMethod method = 1;
	// The Fajr angle to use. This does not need to be set if the calculation method is set.
	// If both fields are set, then the calculation method field takes precedence.
	double fajr_angle = 2;
	// The Isha angle to use. This does not need to be set if the calculation method is set.
	// If both fields are set, then the calculation method field takes precedence.
	double isha_angle = 3;
	// Minutes after Maghrib (if set, the time for Isha will be Maghrib plus the Isha interval).
	int32 isha_interval = 4;
	// The juristic method to use for calculating Asr timings.
	AsrJuristicMethod asr_method = 5;
	// The high latitude rule to use to calculate Fajr and Isha prayers.
	HighLatitudeRule high_latitude_rule = 6;
	// The prayer adjusments (aka offsets) to apply to the calculated prayer times.
	PrayerAdjustments adjustments = 7;
}

// Defines a proto representing the main data corresponding to a masjid.
// This data includes the masjid name, address, phone number and prayer times configuration.
message Masjid {
	// Defines a postal address for the masjid. This message can be used across countries.
	// The fields were inspired by this blog post: https://shopify.engineering/handling-addresses-from-all-around-the-world
	message Address {
		// The street address of the masjid.
		string address_line_1 = 1;
		// Additional address information for the masjid, such as suite number, floor, etc.
		string address_line_2 = 2;
		// The code of the administrative divisions in a country.
		// See https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country.Address
		// This field is what should be used for things like states or provinces.
		string zone_code = 3;
		// The postal code of the masjid.
		string postal_code = 4;
		// The city where the masjid is located.
		string city = 5;
		// A valid ISO 3166-1 country code. The full list can be found here: https://www.iban.com/country-codes.
		// Consider only the Alpha-2 code column.
		string country_code = 6;
	}

	// Defines the main phone number for the masjid.
	message PhoneNumber {
		// The country code corresponding to the phone number.
		// Country codes are defined by ITU-T standards E.123 and E.164.
		// See https://en.wikipedia.org/wiki/List_of_country_calling_codes.
		string country_code = 1;
		// The phone number of the masjid.
		string number = 2;
		// A extension for the number, if required.
		string extension = 3;
	} 

	// The unique id of the masjid. This field is output only.
	string id = 1;
	// The name of the masjid.
	string name = 2;
	// Whether or not the masjid has been verified. 
	bool is_verified = 3;
	// The main address of the masjid.
	Address address = 4;
	// The main phone number to contact for the masjid.
	PhoneNumber phone_number = 5;
	// The configuration to calculate prayer times for the masjid.
	PrayerTimesConfiguration prayer_config = 6;
	// The create time of the Masjid. This field is output only.
	google.protobuf.Timestamp create_time = 9; 
	// The update time of the Masjid. This field is output only.
	google.protobuf.Timestamp update_time = 10; 
}

message CreateMasjidRequest {
	// The masjid to create in the database.
	Masjid masjid = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateMasjidRequest {
	// The masjid to update in the database.
  //
  // The masjid's `id` field is used to identify the book to update.
  // Format: masjids/{masjid}
	Masjid masjid = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteMasjidRequest {
	// The id of the masjid that should be deleted.
	string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteMasjidResponse {}

message GetMasjidRequest {
	// The id of the masjid that should be returned.
	string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListMasjidsRequest {
  // The maximum number of masjids to return. Fewer masjids might be returned.
  // Default value is 25.
  int32 page_size = 2;

  // A page token from a previous `ListMasjids` call. If this is provided, then the 
  // next page will be returned.
  string page_token = 3;
}

message ListMasjidsResponse {
	// The list of returned masjids.
	repeated Masjid masjids = 1;
}
