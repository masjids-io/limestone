// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: adhan_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdhanService_CreateAdhanFile_FullMethodName = "/limestone.AdhanService/CreateAdhanFile"
	AdhanService_UpdateAdhanFile_FullMethodName = "/limestone.AdhanService/UpdateAdhanFile"
	AdhanService_GetAdhanFile_FullMethodName    = "/limestone.AdhanService/GetAdhanFile"
	AdhanService_DeleteAdhanFile_FullMethodName = "/limestone.AdhanService/DeleteAdhanFile"
)

// AdhanServiceClient is the client API for AdhanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdhanServiceClient interface {
	// Creates an adhan audio file in the database for a masjid.
	CreateAdhanFile(ctx context.Context, in *CreateAdhanFileRequest, opts ...grpc.CallOption) (*AdhanFile, error)
	// Updates an adhan audio file in the database for a masjid.
	UpdateAdhanFile(ctx context.Context, in *UpdateAdhanFileRequest, opts ...grpc.CallOption) (*AdhanFile, error)
	// Get an adhan audio file from the database for a masjid.
	GetAdhanFile(ctx context.Context, in *GetAdhanFileRequest, opts ...grpc.CallOption) (*AdhanFile, error)
	// Deletes an adhan audio from the database for a masjid.
	DeleteAdhanFile(ctx context.Context, in *DeleteAdhanFileRequest, opts ...grpc.CallOption) (*DeleteAdhanFileResponse, error)
}

type adhanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdhanServiceClient(cc grpc.ClientConnInterface) AdhanServiceClient {
	return &adhanServiceClient{cc}
}

func (c *adhanServiceClient) CreateAdhanFile(ctx context.Context, in *CreateAdhanFileRequest, opts ...grpc.CallOption) (*AdhanFile, error) {
	out := new(AdhanFile)
	err := c.cc.Invoke(ctx, AdhanService_CreateAdhanFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adhanServiceClient) UpdateAdhanFile(ctx context.Context, in *UpdateAdhanFileRequest, opts ...grpc.CallOption) (*AdhanFile, error) {
	out := new(AdhanFile)
	err := c.cc.Invoke(ctx, AdhanService_UpdateAdhanFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adhanServiceClient) GetAdhanFile(ctx context.Context, in *GetAdhanFileRequest, opts ...grpc.CallOption) (*AdhanFile, error) {
	out := new(AdhanFile)
	err := c.cc.Invoke(ctx, AdhanService_GetAdhanFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adhanServiceClient) DeleteAdhanFile(ctx context.Context, in *DeleteAdhanFileRequest, opts ...grpc.CallOption) (*DeleteAdhanFileResponse, error) {
	out := new(DeleteAdhanFileResponse)
	err := c.cc.Invoke(ctx, AdhanService_DeleteAdhanFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdhanServiceServer is the server API for AdhanService service.
// All implementations must embed UnimplementedAdhanServiceServer
// for forward compatibility
type AdhanServiceServer interface {
	// Creates an adhan audio file in the database for a masjid.
	CreateAdhanFile(context.Context, *CreateAdhanFileRequest) (*AdhanFile, error)
	// Updates an adhan audio file in the database for a masjid.
	UpdateAdhanFile(context.Context, *UpdateAdhanFileRequest) (*AdhanFile, error)
	// Get an adhan audio file from the database for a masjid.
	GetAdhanFile(context.Context, *GetAdhanFileRequest) (*AdhanFile, error)
	// Deletes an adhan audio from the database for a masjid.
	DeleteAdhanFile(context.Context, *DeleteAdhanFileRequest) (*DeleteAdhanFileResponse, error)
	mustEmbedUnimplementedAdhanServiceServer()
}

// UnimplementedAdhanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdhanServiceServer struct {
}

func (UnimplementedAdhanServiceServer) CreateAdhanFile(context.Context, *CreateAdhanFileRequest) (*AdhanFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdhanFile not implemented")
}
func (UnimplementedAdhanServiceServer) UpdateAdhanFile(context.Context, *UpdateAdhanFileRequest) (*AdhanFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdhanFile not implemented")
}
func (UnimplementedAdhanServiceServer) GetAdhanFile(context.Context, *GetAdhanFileRequest) (*AdhanFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdhanFile not implemented")
}
func (UnimplementedAdhanServiceServer) DeleteAdhanFile(context.Context, *DeleteAdhanFileRequest) (*DeleteAdhanFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdhanFile not implemented")
}
func (UnimplementedAdhanServiceServer) mustEmbedUnimplementedAdhanServiceServer() {}

// UnsafeAdhanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdhanServiceServer will
// result in compilation errors.
type UnsafeAdhanServiceServer interface {
	mustEmbedUnimplementedAdhanServiceServer()
}

func RegisterAdhanServiceServer(s grpc.ServiceRegistrar, srv AdhanServiceServer) {
	s.RegisterService(&AdhanService_ServiceDesc, srv)
}

func _AdhanService_CreateAdhanFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdhanFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdhanServiceServer).CreateAdhanFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdhanService_CreateAdhanFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdhanServiceServer).CreateAdhanFile(ctx, req.(*CreateAdhanFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdhanService_UpdateAdhanFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdhanFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdhanServiceServer).UpdateAdhanFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdhanService_UpdateAdhanFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdhanServiceServer).UpdateAdhanFile(ctx, req.(*UpdateAdhanFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdhanService_GetAdhanFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdhanFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdhanServiceServer).GetAdhanFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdhanService_GetAdhanFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdhanServiceServer).GetAdhanFile(ctx, req.(*GetAdhanFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdhanService_DeleteAdhanFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdhanFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdhanServiceServer).DeleteAdhanFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdhanService_DeleteAdhanFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdhanServiceServer).DeleteAdhanFile(ctx, req.(*DeleteAdhanFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdhanService_ServiceDesc is the grpc.ServiceDesc for AdhanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdhanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "limestone.AdhanService",
	HandlerType: (*AdhanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdhanFile",
			Handler:    _AdhanService_CreateAdhanFile_Handler,
		},
		{
			MethodName: "UpdateAdhanFile",
			Handler:    _AdhanService_UpdateAdhanFile_Handler,
		},
		{
			MethodName: "GetAdhanFile",
			Handler:    _AdhanService_GetAdhanFile_Handler,
		},
		{
			MethodName: "DeleteAdhanFile",
			Handler:    _AdhanService_DeleteAdhanFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adhan_service.proto",
}
