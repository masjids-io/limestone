syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

package limestone;

option go_package = "github.com/mnadev/limestone/proto";

service NikkahIoService {
  // Creates a marriage profile for the authenticated user.
  rpc CreateNikkahProfile (CreateNikkahProfileRequest) returns (NikkahProfile) {
    option (google.api.http) = {
      post: "/v1/nikkah/profiles"
      body: "profile"
    };
    option (google.api.method_signature) = "profile";
  }

  // Retrieves the profile of the authenticated user.
  rpc GetSelfNikkahProfile (GetSelfNikkahProfileRequest) returns (NikkahProfile) {
    option (google.api.http) = {
      get: "/v1/nikkah/profile"
    };
  }

  // Updates the profile of the authenticated user.
  rpc UpdateSelfNikkahProfile (UpdateSelfNikkahProfileRequest) returns (NikkahProfile) {
    option (google.api.http) = {
      put: "/v1/nikkah/profile"
      body: "*"
    };
  }

  // Lists profiles based on specified criteria.
  rpc ListNikkahProfiles (ListNikkahProfilesRequest) returns (ListNikkahProfilesResponse) {
    option (google.api.http) = {
      get: "/v1/nikkah/profiles"
    };
  }

  // Gets the details of a specific profile.
  rpc GetNikkahProfile (GetNikkahProfileRequest) returns (NikkahProfile) {
    option (google.api.http) = {
      get: "/v1/nikkah/profiles/{profile_id}"
    };
  }

  // Initiates a like process to another profile.
  // This does not send a like request to another profile. It is used when a user
  // is interested in the bio and details of a profile, and wants to see the 
  // pictures associated with the profile, before making a decision to send 
  // a match request.
  rpc InitiateNikkahLike (InitiateNikkahLikeRequest) returns (NikkahLike) {
    option (google.api.http) = {
      post: "/v1/nikkah/likes"
      body: "like"
    };
    option (google.api.method_signature) = "like";
  }

  // Cancels a like process to another profile.
  // This cancels a like process to another profile, if a user finds that
  // the user is not to their liking after initiating a like.
  rpc CancelNikkahLike (CancelNikkahLikeRequest) returns (NikkahLike) {
    option (google.api.http) = {
      post: "/v1/nikkah/likes/{like_id}/cancel"
    };
  }

  // Completes a like process to another profile.
  // This completes a like process to another profile, if a user finds that
  // the user is to their liking after initiating a like. This notifies
  // the other user of this. Creates a match resource in the database.
  rpc CompleteNikkahLike (CompleteNikkahLikeRequest) returns (CompleteNikkahLikeResponse) {
    option (google.api.http) = {
      post: "/v1/nikkah/likes/{like_id}/complete"
    };
  }

  // Accepts a received match request from a user.
  // This then notifies the other user that the match is accepted, and initiates a chat
  // between both users.
  rpc AcceptNikkahMatchInvite (AcceptNikkahMatchInviteRequest) returns (NikkahMatch) {
    option (google.api.http) = {
      post: "/v1/nikkah/match/{match_id}/accept"
    };
  }

  // Rejects a received match request.
  // This then silently notifies the other user of the rejection.
  rpc RejectNikkahMatchInvite (RejectNikkahMatchInviteRequest) returns (NikkahMatch) {
    option (google.api.http) = {
      post: "/v1/nikkah/match/{match_id}/reject"
    };
  }

  // Ends a currently accepted match.
  rpc EndNikkahMatch (EndNikkahMatchRequest) returns (NikkahMatch) {
    option (google.api.http) = {
      post: "/v1/nikkah/match/{match_id}/end"
    };
  }
}

// Represents a user's profile in the nikkah.io.
message NikkahProfile {
  // The unique id associated with the profile. Field is output only.
  string id = 1;
  // The user id associated with the profile.
  string user_id = 2; 
  // The user id associated with the profile.
  string name = 3; 
  // Defines an enum representing the gender of the user.
  enum Gender {
    // Default value.
    GENDER_UNSPECIFIED = 0;
    MALE = 1;
    FEMALE = 2;
  }    
  // The gender of the user.
  Gender gender = 4;
  
  // A message describing the birth date of a user.
  message BirthDate {
    // Year of birth (e.g., 1995)
    int32 year = 1;
    // Month of birth (1-12)
    enum Month {
      MONTH_UNSPECIFIED = 0; 
      JANUARY = 1;
      FEBRUARY = 2;
      MARCH = 3;
      APRIL = 4;
      MAY = 5;
      JUNE = 6;
      JULY = 7;
      AUGUST = 8;
      SEPTEMBER = 9;
      OCTOBER = 10;
      NOVEMBER = 11;
      DECEMBER = 12;
    }
    Month month = 2;
    // Day of birth (1-31)
    int32 day = 3;
  }
  // The birthdate of the user.
  BirthDate birth_date = 5; 
  // The create time of the event. This field is output only.
  google.protobuf.Timestamp create_time = 6; 
  // The update time of the event. This field is output only.
  google.protobuf.Timestamp update_time = 7; 
}

// NikkahLike represents a like process initiated by a user towards another user's profile.
message NikkahLike {
  // The unique identifier for the like process. This field is output only.
  string like_id = 1;
  // The ID of the profile who initiated the like.
  string liker_profile_id = 2;
  // The ID of the profile which was liked.
  string liked_profile_id = 3;
  // Denotes an enum that specifies the current status of the like.
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // The like is initiated, so the user can see the pictures of the other profile.
    INITIATED = 1;
    // The like has been completed, indicating mutual interest.
    COMPLETED = 2;
    // The like has been cancelled.
    CANCELLED = 3; 
  }
  // The current status of the like process.
  Status status = 4;
  // The create time of the event. This field is output only.
  google.protobuf.Timestamp create_time = 5; 
  // The update time of the event. This field is output only.
  google.protobuf.Timestamp update_time = 6 ; 
}

// NikkahMatch represents a successful match between two users.
message NikkahMatch {
  // The unique identifier for the match. This field is output only.
  string match_id = 1;
  // The ID of the profile who initiated the match.
  string initiator_profile_id = 2;
  // The ID of the profile which received the match.
  string receiver_profile_id = 3;
  // Denotes an enum that specifies the current status of the match.
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // The match has been initiated, so one side has sent the invite to the other.
    INITIATED = 1;
    // The match has been accepted, indicating mutual interest.
    ACCEPTED = 2;
    // The match has been rejected.
    REJECTED = 3;
    // The match has been ended. 
    // This should occur after the match was in ACCEPTED status.
    ENDED = 4;
  }
  // The current status of the match.
  Status status = 4;
  // The create time of the event. This field is output only.
  google.protobuf.Timestamp create_time = 5; 
  // The update time of the event. This field is output only.
  google.protobuf.Timestamp update_time = 6 ; 
}

// CreateNikkahProfileRequest represents a request to create a profile.
message CreateNikkahProfileRequest {
  // The profile to create in the database.
  NikkahProfile profile = 1 [(google.api.field_behavior) = REQUIRED];
}

// GetSelfNikkahProfileRequest is an empty request, as the profile is fetched for the authenticated user.
message GetSelfNikkahProfileRequest {}

// UpdateSelfNikkahProfileRequest represents a request to update the authenticated user's profile.
message UpdateSelfNikkahProfileRequest {
  // The profile to update in the database.
  //
  // The profile's `name` field is used to identify the profile to update.
  NikkahProfile profile = 1 [(google.api.field_behavior) = REQUIRED];
}

// ListNikkahProfilesRequest represents a request to list profiles.
message ListNikkahProfilesRequest {
  // The maximum number of profiles to return. Fewer profiles might be returned.
  // Default value is 25.
  int32 page_size = 1;

  // A page token from a previous `ListNikkahProfiles` call. If this is provided, then the 
  // next page will be returned.
  string page_token = 2;
}

// ListNikkahProfilesResponse represents a response to a list of profiles.
message ListNikkahProfilesResponse {
  // The list of returned profiles.
  repeated NikkahProfile profiles = 1;

  // A page token that can be used in a subsequent `ListNikkahProfiles`
  // call to fetch the next page of results.
  string next_page_token = 2;
}

// GetNikkahProfileRequest represents the request to get a specific profile.
message GetNikkahProfileRequest {
  // The ID of the profile to retrieve.
  string profile_id = 1;
}

// InitiateNikkahLikeRequest represents a request to initiate a like.
message InitiateNikkahLikeRequest {
  // The like to create in the database.
  NikkahLike like = 1;
}

// CancelNikkahLikeRequest represents a request to cancel a like.
message CancelNikkahLikeRequest {
  // The ID of the like process to cancel.
  string like_id = 1;
}

// CompleteNikkahLikeRequest represents a request to complete a like.
message CompleteNikkahLikeRequest {
  // The ID of the like to complete.
  string like_id = 1;
}

// CompleteNikkahLikeResponse represents a response to a complete like request.
message CompleteNikkahLikeResponse {
  // The like that was completed.
  NikkahLike like = 1;
  // The match that was initiated.
  NikkahMatch match = 2;
}

// AcceptNikkahMatchInviteRequest represents a request to accept a match.
message AcceptNikkahMatchInviteRequest {
  // The ID of the match invite to accept. 
  string match_id = 1;
}

// RejectNikkahMatchInviteRequest represents a request to reject a match.
message RejectNikkahMatchInviteRequest {
  // The ID of the match invite to reject. 
  string match_id = 1;
}

// EndNikkahMatchRequest represents a request to end a match.
message EndNikkahMatchRequest {
  // The ID of the match invite to end. 
  string match_id = 1;
}
