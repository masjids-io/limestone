// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: reverts_service.proto

package proto

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines an enum representing the gender of the user.
type RevertProfile_Gender int32

const (
	// Default value.
	RevertProfile_GENDER_UNSPECIFIED RevertProfile_Gender = 0
	RevertProfile_MALE               RevertProfile_Gender = 1
	RevertProfile_FEMALE             RevertProfile_Gender = 2
)

// Enum value maps for RevertProfile_Gender.
var (
	RevertProfile_Gender_name = map[int32]string{
		0: "GENDER_UNSPECIFIED",
		1: "MALE",
		2: "FEMALE",
	}
	RevertProfile_Gender_value = map[string]int32{
		"GENDER_UNSPECIFIED": 0,
		"MALE":               1,
		"FEMALE":             2,
	}
)

func (x RevertProfile_Gender) Enum() *RevertProfile_Gender {
	p := new(RevertProfile_Gender)
	*p = x
	return p
}

func (x RevertProfile_Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevertProfile_Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_reverts_service_proto_enumTypes[0].Descriptor()
}

func (RevertProfile_Gender) Type() protoreflect.EnumType {
	return &file_reverts_service_proto_enumTypes[0]
}

func (x RevertProfile_Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevertProfile_Gender.Descriptor instead.
func (RevertProfile_Gender) EnumDescriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{0, 0}
}

type RevertProfile_BirthDate_Month int32

const (
	RevertProfile_BirthDate_MONTH_UNSPECIFIED RevertProfile_BirthDate_Month = 0
	RevertProfile_BirthDate_JANUARY           RevertProfile_BirthDate_Month = 1
	RevertProfile_BirthDate_FEBRUARY          RevertProfile_BirthDate_Month = 2
	RevertProfile_BirthDate_MARCH             RevertProfile_BirthDate_Month = 3
	RevertProfile_BirthDate_APRIL             RevertProfile_BirthDate_Month = 4
	RevertProfile_BirthDate_MAY               RevertProfile_BirthDate_Month = 5
	RevertProfile_BirthDate_JUNE              RevertProfile_BirthDate_Month = 6
	RevertProfile_BirthDate_JULY              RevertProfile_BirthDate_Month = 7
	RevertProfile_BirthDate_AUGUST            RevertProfile_BirthDate_Month = 8
	RevertProfile_BirthDate_SEPTEMBER         RevertProfile_BirthDate_Month = 9
	RevertProfile_BirthDate_OCTOBER           RevertProfile_BirthDate_Month = 10
	RevertProfile_BirthDate_NOVEMBER          RevertProfile_BirthDate_Month = 11
	RevertProfile_BirthDate_DECEMBER          RevertProfile_BirthDate_Month = 12
)

// Enum value maps for RevertProfile_BirthDate_Month.
var (
	RevertProfile_BirthDate_Month_name = map[int32]string{
		0:  "MONTH_UNSPECIFIED",
		1:  "JANUARY",
		2:  "FEBRUARY",
		3:  "MARCH",
		4:  "APRIL",
		5:  "MAY",
		6:  "JUNE",
		7:  "JULY",
		8:  "AUGUST",
		9:  "SEPTEMBER",
		10: "OCTOBER",
		11: "NOVEMBER",
		12: "DECEMBER",
	}
	RevertProfile_BirthDate_Month_value = map[string]int32{
		"MONTH_UNSPECIFIED": 0,
		"JANUARY":           1,
		"FEBRUARY":          2,
		"MARCH":             3,
		"APRIL":             4,
		"MAY":               5,
		"JUNE":              6,
		"JULY":              7,
		"AUGUST":            8,
		"SEPTEMBER":         9,
		"OCTOBER":           10,
		"NOVEMBER":          11,
		"DECEMBER":          12,
	}
)

func (x RevertProfile_BirthDate_Month) Enum() *RevertProfile_BirthDate_Month {
	p := new(RevertProfile_BirthDate_Month)
	*p = x
	return p
}

func (x RevertProfile_BirthDate_Month) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevertProfile_BirthDate_Month) Descriptor() protoreflect.EnumDescriptor {
	return file_reverts_service_proto_enumTypes[1].Descriptor()
}

func (RevertProfile_BirthDate_Month) Type() protoreflect.EnumType {
	return &file_reverts_service_proto_enumTypes[1]
}

func (x RevertProfile_BirthDate_Month) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevertProfile_BirthDate_Month.Descriptor instead.
func (RevertProfile_BirthDate_Month) EnumDescriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Denotes an enum that specifies the current status of the match.
type RevertMatch_Status int32

const (
	RevertMatch_STATUS_UNSPECIFIED RevertMatch_Status = 0
	// The match has been initiated, so one side has sent the invite to the other.
	RevertMatch_INITIATED RevertMatch_Status = 1
	// The match has been accepted, indicating mutual interest.
	RevertMatch_ACCEPTED RevertMatch_Status = 2
	// The match has been rejected.
	RevertMatch_REJECTED RevertMatch_Status = 3
	// The match has been ended.
	// This should occur after the match was in ACCEPTED status.
	RevertMatch_ENDED RevertMatch_Status = 4 // Changed to 4 to be unique
)

// Enum value maps for RevertMatch_Status.
var (
	RevertMatch_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "INITIATED",
		2: "ACCEPTED",
		3: "REJECTED",
		4: "ENDED",
	}
	RevertMatch_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"INITIATED":          1,
		"ACCEPTED":           2,
		"REJECTED":           3,
		"ENDED":              4,
	}
)

func (x RevertMatch_Status) Enum() *RevertMatch_Status {
	p := new(RevertMatch_Status)
	*p = x
	return p
}

func (x RevertMatch_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevertMatch_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_reverts_service_proto_enumTypes[2].Descriptor()
}

func (RevertMatch_Status) Type() protoreflect.EnumType {
	return &file_reverts_service_proto_enumTypes[2]
}

func (x RevertMatch_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevertMatch_Status.Descriptor instead.
func (RevertMatch_Status) EnumDescriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{1, 0}
}

// Represents a user's profile in the nikkah.io.
type RevertProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique id associated with the profile. Field is output only.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The user id associated with the profile.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The user id associated with the profile.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The gender of the user.
	Gender RevertProfile_Gender `protobuf:"varint,4,opt,name=gender,proto3,enum=limestone.RevertProfile_Gender" json:"gender,omitempty"`
	// The birthdate of the user.
	BirthDate *RevertProfile_BirthDate `protobuf:"bytes,5,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	// The create time of the event. This field is output only.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The update time of the event. This field is output only.
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevertProfile) Reset() {
	*x = RevertProfile{}
	mi := &file_reverts_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevertProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertProfile) ProtoMessage() {}

func (x *RevertProfile) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertProfile.ProtoReflect.Descriptor instead.
func (*RevertProfile) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{0}
}

func (x *RevertProfile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RevertProfile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RevertProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RevertProfile) GetGender() RevertProfile_Gender {
	if x != nil {
		return x.Gender
	}
	return RevertProfile_GENDER_UNSPECIFIED
}

func (x *RevertProfile) GetBirthDate() *RevertProfile_BirthDate {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *RevertProfile) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RevertProfile) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// RevertMatch represents a successful match between two users.
type RevertMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier for the match. This field is output only.
	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	// The ID of the profile who initiated the match.
	InitiatorProfileId string `protobuf:"bytes,2,opt,name=initiator_profile_id,json=initiatorProfileId,proto3" json:"initiator_profile_id,omitempty"`
	// The ID of the profile which received the match.
	ReceiverProfileId string `protobuf:"bytes,3,opt,name=receiver_profile_id,json=receiverProfileId,proto3" json:"receiver_profile_id,omitempty"`
	// The current status of the match.
	Status RevertMatch_Status `protobuf:"varint,4,opt,name=status,proto3,enum=limestone.RevertMatch_Status" json:"status,omitempty"`
	// The create time of the event. This field is output only.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The update time of the event. This field is output only.
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevertMatch) Reset() {
	*x = RevertMatch{}
	mi := &file_reverts_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevertMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertMatch) ProtoMessage() {}

func (x *RevertMatch) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertMatch.ProtoReflect.Descriptor instead.
func (*RevertMatch) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{1}
}

func (x *RevertMatch) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *RevertMatch) GetInitiatorProfileId() string {
	if x != nil {
		return x.InitiatorProfileId
	}
	return ""
}

func (x *RevertMatch) GetReceiverProfileId() string {
	if x != nil {
		return x.ReceiverProfileId
	}
	return ""
}

func (x *RevertMatch) GetStatus() RevertMatch_Status {
	if x != nil {
		return x.Status
	}
	return RevertMatch_STATUS_UNSPECIFIED
}

func (x *RevertMatch) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RevertMatch) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type CreateRevertProfileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The profile to create in the database.
	Profile       *RevertProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRevertProfileRequest) Reset() {
	*x = CreateRevertProfileRequest{}
	mi := &file_reverts_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRevertProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRevertProfileRequest) ProtoMessage() {}

func (x *CreateRevertProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRevertProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateRevertProfileRequest) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRevertProfileRequest) GetProfile() *RevertProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// GetSelfRevertProfileRequest is an empty request, as the profile is fetched for the authenticated user.
type GetSelfRevertProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSelfRevertProfileRequest) Reset() {
	*x = GetSelfRevertProfileRequest{}
	mi := &file_reverts_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSelfRevertProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfRevertProfileRequest) ProtoMessage() {}

func (x *GetSelfRevertProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfRevertProfileRequest.ProtoReflect.Descriptor instead.
func (*GetSelfRevertProfileRequest) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{3}
}

type UpdateSelfRevertProfileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The event to update in the database.
	//
	// The event's `id` field is used to identify the book to update.
	// Format: events/{event}
	Profile       *RevertProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSelfRevertProfileRequest) Reset() {
	*x = UpdateSelfRevertProfileRequest{}
	mi := &file_reverts_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSelfRevertProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSelfRevertProfileRequest) ProtoMessage() {}

func (x *UpdateSelfRevertProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSelfRevertProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateSelfRevertProfileRequest) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSelfRevertProfileRequest) GetProfile() *RevertProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type ListRevertProfilesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of profiles to return. Fewer profiles might be returned.
	// Default value is 25.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token from a previous `ListRevertProfiles` call. If this is provided, then the
	// next page will be returned.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRevertProfilesRequest) Reset() {
	*x = ListRevertProfilesRequest{}
	mi := &file_reverts_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRevertProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRevertProfilesRequest) ProtoMessage() {}

func (x *ListRevertProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRevertProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListRevertProfilesRequest) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListRevertProfilesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRevertProfilesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListRevertProfilesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of returned profiles.
	Profiles []*RevertProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// A page token that can be used in a subsequent `ListRevertProfiles`
	// call to fetch the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRevertProfilesResponse) Reset() {
	*x = ListRevertProfilesResponse{}
	mi := &file_reverts_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRevertProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRevertProfilesResponse) ProtoMessage() {}

func (x *ListRevertProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRevertProfilesResponse.ProtoReflect.Descriptor instead.
func (*ListRevertProfilesResponse) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListRevertProfilesResponse) GetProfiles() []*RevertProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ListRevertProfilesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetRevertProfileRequest represents the request to get a specific profile.
type GetRevertProfileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the profile to retrieve.
	ProfileId     string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRevertProfileRequest) Reset() {
	*x = GetRevertProfileRequest{}
	mi := &file_reverts_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRevertProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevertProfileRequest) ProtoMessage() {}

func (x *GetRevertProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevertProfileRequest.ProtoReflect.Descriptor instead.
func (*GetRevertProfileRequest) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetRevertProfileRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type CreateRevertMatchInviteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the profile receiving the match invite.
	ReceiverProfileId string `protobuf:"bytes,1,opt,name=receiver_profile_id,json=receiverProfileId,proto3" json:"receiver_profile_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateRevertMatchInviteRequest) Reset() {
	*x = CreateRevertMatchInviteRequest{}
	mi := &file_reverts_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRevertMatchInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRevertMatchInviteRequest) ProtoMessage() {}

func (x *CreateRevertMatchInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRevertMatchInviteRequest.ProtoReflect.Descriptor instead.
func (*CreateRevertMatchInviteRequest) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateRevertMatchInviteRequest) GetReceiverProfileId() string {
	if x != nil {
		return x.ReceiverProfileId
	}
	return ""
}

// GetRevertMatchRequest represents the request to get a specific match.
type GetRevertMatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the match to retrieve.
	MatchId       string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRevertMatchRequest) Reset() {
	*x = GetRevertMatchRequest{}
	mi := &file_reverts_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRevertMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevertMatchRequest) ProtoMessage() {}

func (x *GetRevertMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevertMatchRequest.ProtoReflect.Descriptor instead.
func (*GetRevertMatchRequest) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetRevertMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

// Accepts a received match request from a user.
// This then notifies the other user that the match is accepted, and initiates a chat
// between both users.
type AcceptRevertMatchInviteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the match invite to accept.
	MatchId       string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcceptRevertMatchInviteRequest) Reset() {
	*x = AcceptRevertMatchInviteRequest{}
	mi := &file_reverts_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptRevertMatchInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptRevertMatchInviteRequest) ProtoMessage() {}

func (x *AcceptRevertMatchInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptRevertMatchInviteRequest.ProtoReflect.Descriptor instead.
func (*AcceptRevertMatchInviteRequest) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{10}
}

func (x *AcceptRevertMatchInviteRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

// Rejects a received match request from a user.
type RejectRevertMatchInviteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the match invite to reject.
	MatchId       string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectRevertMatchInviteRequest) Reset() {
	*x = RejectRevertMatchInviteRequest{}
	mi := &file_reverts_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectRevertMatchInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectRevertMatchInviteRequest) ProtoMessage() {}

func (x *RejectRevertMatchInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectRevertMatchInviteRequest.ProtoReflect.Descriptor instead.
func (*RejectRevertMatchInviteRequest) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{11}
}

func (x *RejectRevertMatchInviteRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type EndRevertMatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the match invite to end.
	MatchId       string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndRevertMatchRequest) Reset() {
	*x = EndRevertMatchRequest{}
	mi := &file_reverts_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndRevertMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndRevertMatchRequest) ProtoMessage() {}

func (x *EndRevertMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndRevertMatchRequest.ProtoReflect.Descriptor instead.
func (*EndRevertMatchRequest) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{12}
}

func (x *EndRevertMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

// A message describing the birth date of a user.
type RevertProfile_BirthDate struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Year          int32                         `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month         RevertProfile_BirthDate_Month `protobuf:"varint,2,opt,name=month,proto3,enum=limestone.RevertProfile_BirthDate_Month" json:"month,omitempty"`
	Day           int32                         `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevertProfile_BirthDate) Reset() {
	*x = RevertProfile_BirthDate{}
	mi := &file_reverts_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevertProfile_BirthDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertProfile_BirthDate) ProtoMessage() {}

func (x *RevertProfile_BirthDate) ProtoReflect() protoreflect.Message {
	mi := &file_reverts_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertProfile_BirthDate.ProtoReflect.Descriptor instead.
func (*RevertProfile_BirthDate) Descriptor() ([]byte, []int) {
	return file_reverts_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RevertProfile_BirthDate) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *RevertProfile_BirthDate) GetMonth() RevertProfile_BirthDate_Month {
	if x != nil {
		return x.Month
	}
	return RevertProfile_BirthDate_MONTH_UNSPECIFIED
}

func (x *RevertProfile_BirthDate) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

var File_reverts_service_proto protoreflect.FileDescriptor

var file_reverts_service_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x05, 0x0a, 0x0d,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0xa4, 0x02, 0x0a, 0x09, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x64, 0x61, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x41, 0x4e, 0x55, 0x41, 0x52, 0x59,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x45, 0x42, 0x52, 0x55, 0x41, 0x52, 0x59, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x52, 0x43, 0x48, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x50, 0x52, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x59, 0x10, 0x05, 0x12,
	0x08, 0x0a, 0x04, 0x4a, 0x55, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x55, 0x4c,
	0x59, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x55, 0x47, 0x55, 0x53, 0x54, 0x10, 0x08, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x45, 0x50, 0x54, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x43, 0x54, 0x4f, 0x42, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x4f, 0x56, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0c, 0x22, 0x36, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x22,
	0x93, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x04, 0x22, 0x56, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x1d, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x1e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x7a, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x38, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x13, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x32, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x22, 0x3b, 0x0a, 0x1e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x32, 0x0a,
	0x15, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x32, 0xa1, 0x0a, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x73, 0x49, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25,
	0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0x2f, 0xda, 0x41, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x3a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x75, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x7e, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x29, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a,
	0x01, 0x2a, 0x1a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x7f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x2e,
	0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x6c,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x29, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x27, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f,
	0x7b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x70, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x7b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2f, 0x7b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12,
	0x29, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x7b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x74, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x20, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e,
	0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x73,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x7b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x65, 0x6e, 0x64, 0x42, 0x8b, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x42, 0x13, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6e, 0x61, 0x64, 0x65,
	0x76, 0x2f, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0xa2, 0x02, 0x03, 0x4c, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x4c, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0xca, 0x02, 0x09, 0x4c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0xe2,
	0x02, 0x15, 0x4c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x4c, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_reverts_service_proto_rawDescOnce sync.Once
	file_reverts_service_proto_rawDescData []byte
)

func file_reverts_service_proto_rawDescGZIP() []byte {
	file_reverts_service_proto_rawDescOnce.Do(func() {
		file_reverts_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_reverts_service_proto_rawDesc), len(file_reverts_service_proto_rawDesc)))
	})
	return file_reverts_service_proto_rawDescData
}

var file_reverts_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_reverts_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_reverts_service_proto_goTypes = []any{
	(RevertProfile_Gender)(0),              // 0: limestone.RevertProfile.Gender
	(RevertProfile_BirthDate_Month)(0),     // 1: limestone.RevertProfile.BirthDate.Month
	(RevertMatch_Status)(0),                // 2: limestone.RevertMatch.Status
	(*RevertProfile)(nil),                  // 3: limestone.RevertProfile
	(*RevertMatch)(nil),                    // 4: limestone.RevertMatch
	(*CreateRevertProfileRequest)(nil),     // 5: limestone.CreateRevertProfileRequest
	(*GetSelfRevertProfileRequest)(nil),    // 6: limestone.GetSelfRevertProfileRequest
	(*UpdateSelfRevertProfileRequest)(nil), // 7: limestone.UpdateSelfRevertProfileRequest
	(*ListRevertProfilesRequest)(nil),      // 8: limestone.ListRevertProfilesRequest
	(*ListRevertProfilesResponse)(nil),     // 9: limestone.ListRevertProfilesResponse
	(*GetRevertProfileRequest)(nil),        // 10: limestone.GetRevertProfileRequest
	(*CreateRevertMatchInviteRequest)(nil), // 11: limestone.CreateRevertMatchInviteRequest
	(*GetRevertMatchRequest)(nil),          // 12: limestone.GetRevertMatchRequest
	(*AcceptRevertMatchInviteRequest)(nil), // 13: limestone.AcceptRevertMatchInviteRequest
	(*RejectRevertMatchInviteRequest)(nil), // 14: limestone.RejectRevertMatchInviteRequest
	(*EndRevertMatchRequest)(nil),          // 15: limestone.EndRevertMatchRequest
	(*RevertProfile_BirthDate)(nil),        // 16: limestone.RevertProfile.BirthDate
	(*timestamppb.Timestamp)(nil),          // 17: google.protobuf.Timestamp
}
var file_reverts_service_proto_depIdxs = []int32{
	0,  // 0: limestone.RevertProfile.gender:type_name -> limestone.RevertProfile.Gender
	16, // 1: limestone.RevertProfile.birth_date:type_name -> limestone.RevertProfile.BirthDate
	17, // 2: limestone.RevertProfile.create_time:type_name -> google.protobuf.Timestamp
	17, // 3: limestone.RevertProfile.update_time:type_name -> google.protobuf.Timestamp
	2,  // 4: limestone.RevertMatch.status:type_name -> limestone.RevertMatch.Status
	17, // 5: limestone.RevertMatch.create_time:type_name -> google.protobuf.Timestamp
	17, // 6: limestone.RevertMatch.update_time:type_name -> google.protobuf.Timestamp
	3,  // 7: limestone.CreateRevertProfileRequest.profile:type_name -> limestone.RevertProfile
	3,  // 8: limestone.UpdateSelfRevertProfileRequest.profile:type_name -> limestone.RevertProfile
	3,  // 9: limestone.ListRevertProfilesResponse.profiles:type_name -> limestone.RevertProfile
	1,  // 10: limestone.RevertProfile.BirthDate.month:type_name -> limestone.RevertProfile.BirthDate.Month
	5,  // 11: limestone.RevertsIoService.CreateRevertProfile:input_type -> limestone.CreateRevertProfileRequest
	6,  // 12: limestone.RevertsIoService.GetSelfRevertProfile:input_type -> limestone.GetSelfRevertProfileRequest
	7,  // 13: limestone.RevertsIoService.UpdateSelfRevertProfile:input_type -> limestone.UpdateSelfRevertProfileRequest
	8,  // 14: limestone.RevertsIoService.ListRevertProfiles:input_type -> limestone.ListRevertProfilesRequest
	10, // 15: limestone.RevertsIoService.GetRevertProfile:input_type -> limestone.GetRevertProfileRequest
	11, // 16: limestone.RevertsIoService.CreateRevertMatchInvite:input_type -> limestone.CreateRevertMatchInviteRequest
	12, // 17: limestone.RevertsIoService.GetRevertMatch:input_type -> limestone.GetRevertMatchRequest
	13, // 18: limestone.RevertsIoService.AcceptRevertMatchInvite:input_type -> limestone.AcceptRevertMatchInviteRequest
	14, // 19: limestone.RevertsIoService.RejectRevertMatchInvite:input_type -> limestone.RejectRevertMatchInviteRequest
	15, // 20: limestone.RevertsIoService.EndRevertMatch:input_type -> limestone.EndRevertMatchRequest
	3,  // 21: limestone.RevertsIoService.CreateRevertProfile:output_type -> limestone.RevertProfile
	3,  // 22: limestone.RevertsIoService.GetSelfRevertProfile:output_type -> limestone.RevertProfile
	3,  // 23: limestone.RevertsIoService.UpdateSelfRevertProfile:output_type -> limestone.RevertProfile
	9,  // 24: limestone.RevertsIoService.ListRevertProfiles:output_type -> limestone.ListRevertProfilesResponse
	3,  // 25: limestone.RevertsIoService.GetRevertProfile:output_type -> limestone.RevertProfile
	4,  // 26: limestone.RevertsIoService.CreateRevertMatchInvite:output_type -> limestone.RevertMatch
	4,  // 27: limestone.RevertsIoService.GetRevertMatch:output_type -> limestone.RevertMatch
	4,  // 28: limestone.RevertsIoService.AcceptRevertMatchInvite:output_type -> limestone.RevertMatch
	4,  // 29: limestone.RevertsIoService.RejectRevertMatchInvite:output_type -> limestone.RevertMatch
	4,  // 30: limestone.RevertsIoService.EndRevertMatch:output_type -> limestone.RevertMatch
	21, // [21:31] is the sub-list for method output_type
	11, // [11:21] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_reverts_service_proto_init() }
func file_reverts_service_proto_init() {
	if File_reverts_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_reverts_service_proto_rawDesc), len(file_reverts_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reverts_service_proto_goTypes,
		DependencyIndexes: file_reverts_service_proto_depIdxs,
		EnumInfos:         file_reverts_service_proto_enumTypes,
		MessageInfos:      file_reverts_service_proto_msgTypes,
	}.Build()
	File_reverts_service_proto = out.File
	file_reverts_service_proto_goTypes = nil
	file_reverts_service_proto_depIdxs = nil
}
