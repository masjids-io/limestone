// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: nikkah_service.proto

package proto

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines an enum representing the gender of the user.
type NikkahProfile_Gender int32

const (
	// Default value.
	NikkahProfile_GENDER_UNSPECIFIED NikkahProfile_Gender = 0
	NikkahProfile_MALE               NikkahProfile_Gender = 1
	NikkahProfile_FEMALE             NikkahProfile_Gender = 2
)

// Enum value maps for NikkahProfile_Gender.
var (
	NikkahProfile_Gender_name = map[int32]string{
		0: "GENDER_UNSPECIFIED",
		1: "MALE",
		2: "FEMALE",
	}
	NikkahProfile_Gender_value = map[string]int32{
		"GENDER_UNSPECIFIED": 0,
		"MALE":               1,
		"FEMALE":             2,
	}
)

func (x NikkahProfile_Gender) Enum() *NikkahProfile_Gender {
	p := new(NikkahProfile_Gender)
	*p = x
	return p
}

func (x NikkahProfile_Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NikkahProfile_Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_nikkah_service_proto_enumTypes[0].Descriptor()
}

func (NikkahProfile_Gender) Type() protoreflect.EnumType {
	return &file_nikkah_service_proto_enumTypes[0]
}

func (x NikkahProfile_Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NikkahProfile_Gender.Descriptor instead.
func (NikkahProfile_Gender) EnumDescriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{0, 0}
}

// Month of birth (1-12)
type NikkahProfile_BirthDate_Month int32

const (
	NikkahProfile_BirthDate_MONTH_UNSPECIFIED NikkahProfile_BirthDate_Month = 0
	NikkahProfile_BirthDate_JANUARY           NikkahProfile_BirthDate_Month = 1
	NikkahProfile_BirthDate_FEBRUARY          NikkahProfile_BirthDate_Month = 2
	NikkahProfile_BirthDate_MARCH             NikkahProfile_BirthDate_Month = 3
	NikkahProfile_BirthDate_APRIL             NikkahProfile_BirthDate_Month = 4
	NikkahProfile_BirthDate_MAY               NikkahProfile_BirthDate_Month = 5
	NikkahProfile_BirthDate_JUNE              NikkahProfile_BirthDate_Month = 6
	NikkahProfile_BirthDate_JULY              NikkahProfile_BirthDate_Month = 7
	NikkahProfile_BirthDate_AUGUST            NikkahProfile_BirthDate_Month = 8
	NikkahProfile_BirthDate_SEPTEMBER         NikkahProfile_BirthDate_Month = 9
	NikkahProfile_BirthDate_OCTOBER           NikkahProfile_BirthDate_Month = 10
	NikkahProfile_BirthDate_NOVEMBER          NikkahProfile_BirthDate_Month = 11
	NikkahProfile_BirthDate_DECEMBER          NikkahProfile_BirthDate_Month = 12
)

// Enum value maps for NikkahProfile_BirthDate_Month.
var (
	NikkahProfile_BirthDate_Month_name = map[int32]string{
		0:  "MONTH_UNSPECIFIED",
		1:  "JANUARY",
		2:  "FEBRUARY",
		3:  "MARCH",
		4:  "APRIL",
		5:  "MAY",
		6:  "JUNE",
		7:  "JULY",
		8:  "AUGUST",
		9:  "SEPTEMBER",
		10: "OCTOBER",
		11: "NOVEMBER",
		12: "DECEMBER",
	}
	NikkahProfile_BirthDate_Month_value = map[string]int32{
		"MONTH_UNSPECIFIED": 0,
		"JANUARY":           1,
		"FEBRUARY":          2,
		"MARCH":             3,
		"APRIL":             4,
		"MAY":               5,
		"JUNE":              6,
		"JULY":              7,
		"AUGUST":            8,
		"SEPTEMBER":         9,
		"OCTOBER":           10,
		"NOVEMBER":          11,
		"DECEMBER":          12,
	}
)

func (x NikkahProfile_BirthDate_Month) Enum() *NikkahProfile_BirthDate_Month {
	p := new(NikkahProfile_BirthDate_Month)
	*p = x
	return p
}

func (x NikkahProfile_BirthDate_Month) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NikkahProfile_BirthDate_Month) Descriptor() protoreflect.EnumDescriptor {
	return file_nikkah_service_proto_enumTypes[1].Descriptor()
}

func (NikkahProfile_BirthDate_Month) Type() protoreflect.EnumType {
	return &file_nikkah_service_proto_enumTypes[1]
}

func (x NikkahProfile_BirthDate_Month) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NikkahProfile_BirthDate_Month.Descriptor instead.
func (NikkahProfile_BirthDate_Month) EnumDescriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Denotes an enum that specifies the current status of the like.
type NikkahLike_Status int32

const (
	NikkahLike_STATUS_UNSPECIFIED NikkahLike_Status = 0
	// The like is initiated, so the user can see the pictures of the other profile.
	NikkahLike_INITIATED NikkahLike_Status = 1
	// The like has been completed, indicating mutual interest.
	NikkahLike_COMPLETED NikkahLike_Status = 2
	// The like has been cancelled.
	NikkahLike_CANCELLED NikkahLike_Status = 3
)

// Enum value maps for NikkahLike_Status.
var (
	NikkahLike_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "INITIATED",
		2: "COMPLETED",
		3: "CANCELLED",
	}
	NikkahLike_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"INITIATED":          1,
		"COMPLETED":          2,
		"CANCELLED":          3,
	}
)

func (x NikkahLike_Status) Enum() *NikkahLike_Status {
	p := new(NikkahLike_Status)
	*p = x
	return p
}

func (x NikkahLike_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NikkahLike_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_nikkah_service_proto_enumTypes[2].Descriptor()
}

func (NikkahLike_Status) Type() protoreflect.EnumType {
	return &file_nikkah_service_proto_enumTypes[2]
}

func (x NikkahLike_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NikkahLike_Status.Descriptor instead.
func (NikkahLike_Status) EnumDescriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{1, 0}
}

// Denotes an enum that specifies the current status of the match.
type NikkahMatch_Status int32

const (
	NikkahMatch_STATUS_UNSPECIFIED NikkahMatch_Status = 0
	// The match has been initiated, so one side has sent the invite to the other.
	NikkahMatch_INITIATED NikkahMatch_Status = 1
	// The match has been accepted, indicating mutual interest.
	NikkahMatch_ACCEPTED NikkahMatch_Status = 2
	// The match has been rejected.
	NikkahMatch_REJECTED NikkahMatch_Status = 3
	// The match has been ended.
	// This should occur after the match was in ACCEPTED status.
	NikkahMatch_ENDED NikkahMatch_Status = 4
)

// Enum value maps for NikkahMatch_Status.
var (
	NikkahMatch_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "INITIATED",
		2: "ACCEPTED",
		3: "REJECTED",
		4: "ENDED",
	}
	NikkahMatch_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"INITIATED":          1,
		"ACCEPTED":           2,
		"REJECTED":           3,
		"ENDED":              4,
	}
)

func (x NikkahMatch_Status) Enum() *NikkahMatch_Status {
	p := new(NikkahMatch_Status)
	*p = x
	return p
}

func (x NikkahMatch_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NikkahMatch_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_nikkah_service_proto_enumTypes[3].Descriptor()
}

func (NikkahMatch_Status) Type() protoreflect.EnumType {
	return &file_nikkah_service_proto_enumTypes[3]
}

func (x NikkahMatch_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NikkahMatch_Status.Descriptor instead.
func (NikkahMatch_Status) EnumDescriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{2, 0}
}

// Represents a user's profile in the nikkah.io.
type NikkahProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique id associated with the profile. Field is output only.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The user id associated with the profile.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The user id associated with the profile.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The gender of the user.
	Gender NikkahProfile_Gender `protobuf:"varint,4,opt,name=gender,proto3,enum=limestone.NikkahProfile_Gender" json:"gender,omitempty"`
	// The birthdate of the user.
	BirthDate *NikkahProfile_BirthDate `protobuf:"bytes,5,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	// The create time of the event. This field is output only.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The update time of the event. This field is output only.
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NikkahProfile) Reset() {
	*x = NikkahProfile{}
	mi := &file_nikkah_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NikkahProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NikkahProfile) ProtoMessage() {}

func (x *NikkahProfile) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NikkahProfile.ProtoReflect.Descriptor instead.
func (*NikkahProfile) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{0}
}

func (x *NikkahProfile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NikkahProfile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NikkahProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NikkahProfile) GetGender() NikkahProfile_Gender {
	if x != nil {
		return x.Gender
	}
	return NikkahProfile_GENDER_UNSPECIFIED
}

func (x *NikkahProfile) GetBirthDate() *NikkahProfile_BirthDate {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *NikkahProfile) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *NikkahProfile) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// NikkahLike represents a like process initiated by a user towards another user's profile.
type NikkahLike struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier for the like process. This field is output only.
	LikeId string `protobuf:"bytes,1,opt,name=like_id,json=likeId,proto3" json:"like_id,omitempty"`
	// The ID of the profile who initiated the like.
	LikerProfileId string `protobuf:"bytes,2,opt,name=liker_profile_id,json=likerProfileId,proto3" json:"liker_profile_id,omitempty"`
	// The ID of the profile which was liked.
	LikedProfileId string `protobuf:"bytes,3,opt,name=liked_profile_id,json=likedProfileId,proto3" json:"liked_profile_id,omitempty"`
	// The current status of the like process.
	Status NikkahLike_Status `protobuf:"varint,4,opt,name=status,proto3,enum=limestone.NikkahLike_Status" json:"status,omitempty"`
	// The create time of the event. This field is output only.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The update time of the event. This field is output only.
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NikkahLike) Reset() {
	*x = NikkahLike{}
	mi := &file_nikkah_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NikkahLike) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NikkahLike) ProtoMessage() {}

func (x *NikkahLike) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NikkahLike.ProtoReflect.Descriptor instead.
func (*NikkahLike) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{1}
}

func (x *NikkahLike) GetLikeId() string {
	if x != nil {
		return x.LikeId
	}
	return ""
}

func (x *NikkahLike) GetLikerProfileId() string {
	if x != nil {
		return x.LikerProfileId
	}
	return ""
}

func (x *NikkahLike) GetLikedProfileId() string {
	if x != nil {
		return x.LikedProfileId
	}
	return ""
}

func (x *NikkahLike) GetStatus() NikkahLike_Status {
	if x != nil {
		return x.Status
	}
	return NikkahLike_STATUS_UNSPECIFIED
}

func (x *NikkahLike) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *NikkahLike) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// NikkahMatch represents a successful match between two users.
type NikkahMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier for the match. This field is output only.
	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	// The ID of the profile who initiated the match.
	InitiatorProfileId string `protobuf:"bytes,2,opt,name=initiator_profile_id,json=initiatorProfileId,proto3" json:"initiator_profile_id,omitempty"`
	// The ID of the profile which received the match.
	ReceiverProfileId string `protobuf:"bytes,3,opt,name=receiver_profile_id,json=receiverProfileId,proto3" json:"receiver_profile_id,omitempty"`
	// The current status of the match.
	Status NikkahMatch_Status `protobuf:"varint,4,opt,name=status,proto3,enum=limestone.NikkahMatch_Status" json:"status,omitempty"`
	// The create time of the event. This field is output only.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The update time of the event. This field is output only.
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NikkahMatch) Reset() {
	*x = NikkahMatch{}
	mi := &file_nikkah_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NikkahMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NikkahMatch) ProtoMessage() {}

func (x *NikkahMatch) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NikkahMatch.ProtoReflect.Descriptor instead.
func (*NikkahMatch) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{2}
}

func (x *NikkahMatch) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *NikkahMatch) GetInitiatorProfileId() string {
	if x != nil {
		return x.InitiatorProfileId
	}
	return ""
}

func (x *NikkahMatch) GetReceiverProfileId() string {
	if x != nil {
		return x.ReceiverProfileId
	}
	return ""
}

func (x *NikkahMatch) GetStatus() NikkahMatch_Status {
	if x != nil {
		return x.Status
	}
	return NikkahMatch_STATUS_UNSPECIFIED
}

func (x *NikkahMatch) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *NikkahMatch) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// CreateNikkahProfileRequest represents a request to create a profile.
type CreateNikkahProfileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The profile to create in the database.
	Profile       *NikkahProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNikkahProfileRequest) Reset() {
	*x = CreateNikkahProfileRequest{}
	mi := &file_nikkah_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNikkahProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNikkahProfileRequest) ProtoMessage() {}

func (x *CreateNikkahProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNikkahProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateNikkahProfileRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNikkahProfileRequest) GetProfile() *NikkahProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// GetSelfNikkahProfileRequest is an empty request, as the profile is fetched for the authenticated user.
type GetSelfNikkahProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSelfNikkahProfileRequest) Reset() {
	*x = GetSelfNikkahProfileRequest{}
	mi := &file_nikkah_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSelfNikkahProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfNikkahProfileRequest) ProtoMessage() {}

func (x *GetSelfNikkahProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfNikkahProfileRequest.ProtoReflect.Descriptor instead.
func (*GetSelfNikkahProfileRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{4}
}

// UpdateSelfNikkahProfileRequest represents a request to update the authenticated user's profile.
type UpdateSelfNikkahProfileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The profile to update in the database.
	//
	// The profile's `name` field is used to identify the profile to update.
	Profile       *NikkahProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSelfNikkahProfileRequest) Reset() {
	*x = UpdateSelfNikkahProfileRequest{}
	mi := &file_nikkah_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSelfNikkahProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSelfNikkahProfileRequest) ProtoMessage() {}

func (x *UpdateSelfNikkahProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSelfNikkahProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateSelfNikkahProfileRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateSelfNikkahProfileRequest) GetProfile() *NikkahProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// ListNikkahProfilesRequest represents a request to list profiles.
type ListNikkahProfilesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of profiles to return. Fewer profiles might be returned.
	// Default value is 25.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token from a previous `ListNikkahProfiles` call. If this is provided, then the
	// next page will be returned.
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNikkahProfilesRequest) Reset() {
	*x = ListNikkahProfilesRequest{}
	mi := &file_nikkah_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNikkahProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNikkahProfilesRequest) ProtoMessage() {}

func (x *ListNikkahProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNikkahProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListNikkahProfilesRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListNikkahProfilesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNikkahProfilesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListNikkahProfilesResponse represents a response to a list of profiles.
type ListNikkahProfilesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of returned profiles.
	Profiles []*NikkahProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// A page token that can be used in a subsequent `ListNikkahProfiles`
	// call to fetch the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNikkahProfilesResponse) Reset() {
	*x = ListNikkahProfilesResponse{}
	mi := &file_nikkah_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNikkahProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNikkahProfilesResponse) ProtoMessage() {}

func (x *ListNikkahProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNikkahProfilesResponse.ProtoReflect.Descriptor instead.
func (*ListNikkahProfilesResponse) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListNikkahProfilesResponse) GetProfiles() []*NikkahProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ListNikkahProfilesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetNikkahProfileRequest represents the request to get a specific profile.
type GetNikkahProfileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the profile to retrieve.
	ProfileId     string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNikkahProfileRequest) Reset() {
	*x = GetNikkahProfileRequest{}
	mi := &file_nikkah_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNikkahProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNikkahProfileRequest) ProtoMessage() {}

func (x *GetNikkahProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNikkahProfileRequest.ProtoReflect.Descriptor instead.
func (*GetNikkahProfileRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetNikkahProfileRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

// InitiateNikkahLikeRequest represents a request to initiate a like.
type InitiateNikkahLikeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The like to create in the database.
	Like          *NikkahLike `protobuf:"bytes,1,opt,name=like,proto3" json:"like,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitiateNikkahLikeRequest) Reset() {
	*x = InitiateNikkahLikeRequest{}
	mi := &file_nikkah_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateNikkahLikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateNikkahLikeRequest) ProtoMessage() {}

func (x *InitiateNikkahLikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateNikkahLikeRequest.ProtoReflect.Descriptor instead.
func (*InitiateNikkahLikeRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{9}
}

func (x *InitiateNikkahLikeRequest) GetLike() *NikkahLike {
	if x != nil {
		return x.Like
	}
	return nil
}

// GetNikkahLikeRequest represents a request to get a specific like.
type GetNikkahLikeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the like to retrieve.
	LikeId        string `protobuf:"bytes,1,opt,name=like_id,json=likeId,proto3" json:"like_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNikkahLikeRequest) Reset() {
	*x = GetNikkahLikeRequest{}
	mi := &file_nikkah_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNikkahLikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNikkahLikeRequest) ProtoMessage() {}

func (x *GetNikkahLikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNikkahLikeRequest.ProtoReflect.Descriptor instead.
func (*GetNikkahLikeRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetNikkahLikeRequest) GetLikeId() string {
	if x != nil {
		return x.LikeId
	}
	return ""
}

// CancelNikkahLikeRequest represents a request to cancel a like.
type CancelNikkahLikeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the like process to cancel.
	LikeId        string `protobuf:"bytes,1,opt,name=like_id,json=likeId,proto3" json:"like_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelNikkahLikeRequest) Reset() {
	*x = CancelNikkahLikeRequest{}
	mi := &file_nikkah_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelNikkahLikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelNikkahLikeRequest) ProtoMessage() {}

func (x *CancelNikkahLikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelNikkahLikeRequest.ProtoReflect.Descriptor instead.
func (*CancelNikkahLikeRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{11}
}

func (x *CancelNikkahLikeRequest) GetLikeId() string {
	if x != nil {
		return x.LikeId
	}
	return ""
}

// CompleteNikkahLikeRequest represents a request to complete a like.
type CompleteNikkahLikeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the like to complete.
	LikeId        string `protobuf:"bytes,1,opt,name=like_id,json=likeId,proto3" json:"like_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteNikkahLikeRequest) Reset() {
	*x = CompleteNikkahLikeRequest{}
	mi := &file_nikkah_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteNikkahLikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteNikkahLikeRequest) ProtoMessage() {}

func (x *CompleteNikkahLikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteNikkahLikeRequest.ProtoReflect.Descriptor instead.
func (*CompleteNikkahLikeRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{12}
}

func (x *CompleteNikkahLikeRequest) GetLikeId() string {
	if x != nil {
		return x.LikeId
	}
	return ""
}

// CompleteNikkahLikeResponse represents a response to a complete like request.
type CompleteNikkahLikeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The like that was completed.
	Like *NikkahLike `protobuf:"bytes,1,opt,name=like,proto3" json:"like,omitempty"`
	// The match that was initiated.
	Match         *NikkahMatch `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteNikkahLikeResponse) Reset() {
	*x = CompleteNikkahLikeResponse{}
	mi := &file_nikkah_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteNikkahLikeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteNikkahLikeResponse) ProtoMessage() {}

func (x *CompleteNikkahLikeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteNikkahLikeResponse.ProtoReflect.Descriptor instead.
func (*CompleteNikkahLikeResponse) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{13}
}

func (x *CompleteNikkahLikeResponse) GetLike() *NikkahLike {
	if x != nil {
		return x.Like
	}
	return nil
}

func (x *CompleteNikkahLikeResponse) GetMatch() *NikkahMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

// AcceptNikkahMatchInviteRequest represents a request to accept a match.
type AcceptNikkahMatchInviteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the match invite to accept.
	MatchId       string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcceptNikkahMatchInviteRequest) Reset() {
	*x = AcceptNikkahMatchInviteRequest{}
	mi := &file_nikkah_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptNikkahMatchInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptNikkahMatchInviteRequest) ProtoMessage() {}

func (x *AcceptNikkahMatchInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptNikkahMatchInviteRequest.ProtoReflect.Descriptor instead.
func (*AcceptNikkahMatchInviteRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{14}
}

func (x *AcceptNikkahMatchInviteRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

// GetNikkahMatchRequest represents a request to get a specific match.
type GetNikkahMatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the match to retrieve.
	MatchId       string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNikkahMatchRequest) Reset() {
	*x = GetNikkahMatchRequest{}
	mi := &file_nikkah_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNikkahMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNikkahMatchRequest) ProtoMessage() {}

func (x *GetNikkahMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNikkahMatchRequest.ProtoReflect.Descriptor instead.
func (*GetNikkahMatchRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetNikkahMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

// RejectNikkahMatchInviteRequest represents a request to reject a match.
type RejectNikkahMatchInviteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the match invite to reject.
	MatchId       string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectNikkahMatchInviteRequest) Reset() {
	*x = RejectNikkahMatchInviteRequest{}
	mi := &file_nikkah_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectNikkahMatchInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectNikkahMatchInviteRequest) ProtoMessage() {}

func (x *RejectNikkahMatchInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectNikkahMatchInviteRequest.ProtoReflect.Descriptor instead.
func (*RejectNikkahMatchInviteRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{16}
}

func (x *RejectNikkahMatchInviteRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

// EndNikkahMatchRequest represents a request to end a match.
type EndNikkahMatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the match invite to end.
	MatchId       string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndNikkahMatchRequest) Reset() {
	*x = EndNikkahMatchRequest{}
	mi := &file_nikkah_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndNikkahMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndNikkahMatchRequest) ProtoMessage() {}

func (x *EndNikkahMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndNikkahMatchRequest.ProtoReflect.Descriptor instead.
func (*EndNikkahMatchRequest) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{17}
}

func (x *EndNikkahMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

// A message describing the birth date of a user.
type NikkahProfile_BirthDate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Year of birth (e.g., 1995)
	Year  int32                         `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month NikkahProfile_BirthDate_Month `protobuf:"varint,2,opt,name=month,proto3,enum=limestone.NikkahProfile_BirthDate_Month" json:"month,omitempty"`
	// Day of birth (1-31)
	Day           int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NikkahProfile_BirthDate) Reset() {
	*x = NikkahProfile_BirthDate{}
	mi := &file_nikkah_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NikkahProfile_BirthDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NikkahProfile_BirthDate) ProtoMessage() {}

func (x *NikkahProfile_BirthDate) ProtoReflect() protoreflect.Message {
	mi := &file_nikkah_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NikkahProfile_BirthDate.ProtoReflect.Descriptor instead.
func (*NikkahProfile_BirthDate) Descriptor() ([]byte, []int) {
	return file_nikkah_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NikkahProfile_BirthDate) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *NikkahProfile_BirthDate) GetMonth() NikkahProfile_BirthDate_Month {
	if x != nil {
		return x.Month
	}
	return NikkahProfile_BirthDate_MONTH_UNSPECIFIED
}

func (x *NikkahProfile_BirthDate) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

var File_nikkah_service_proto protoreflect.FileDescriptor

var file_nikkah_service_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x6e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x05, 0x0a, 0x0d, 0x4e,
	0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b, 0x6b,
	0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0xa4, 0x02, 0x0a, 0x09, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e,
	0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x41, 0x4e, 0x55, 0x41, 0x52,
	0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x45, 0x42, 0x52, 0x55, 0x41, 0x52, 0x59, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x52, 0x43, 0x48, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x50, 0x52, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x59, 0x10, 0x05,
	0x12, 0x08, 0x0a, 0x04, 0x4a, 0x55, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x55,
	0x4c, 0x59, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x55, 0x47, 0x55, 0x53, 0x54, 0x10, 0x08,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x50, 0x54, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x09, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x43, 0x54, 0x4f, 0x42, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x4f, 0x56, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x43, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0c, 0x22, 0x36, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02,
	0x22, 0x8a, 0x03, 0x0a, 0x0a, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x69, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6b, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e,
	0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4d,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0xa5, 0x03,
	0x0a, 0x0b, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b,
	0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x04, 0x22, 0x56, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x1d, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x1e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b, 0x6b,
	0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x7a, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69,
	0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x38, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x19, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e,
	0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x22,
	0x2f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6b, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64,
	0x22, 0x32, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68,
	0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x69, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69,
	0x6b, 0x65, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x1a, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x6b, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e,
	0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x3b, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x69, 0x6b, 0x6b, 0x61,
	0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x32,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x69, 0x6b, 0x6b,
	0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22,
	0x32, 0x0a, 0x15, 0x45, 0x6e, 0x64, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x32, 0xf9, 0x0c, 0x0a, 0x0f, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x49, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x25, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0x2e, 0xda, 0x41, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x3a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x13, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x74, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4e, 0x69, 0x6b, 0x6b, 0x61,
	0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4e, 0x69, 0x6b, 0x6b,
	0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b,
	0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x2f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x7d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x6c, 0x66, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x29, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01,
	0x2a, 0x1a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x7e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x69, 0x6b,
	0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6c, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x69, 0x6b, 0x6b,
	0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x2f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x6b, 0x6b,
	0x61, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12,
	0x20, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x78, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x6b,
	0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x24, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x6b, 0x6b,
	0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68,
	0x4c, 0x69, 0x6b, 0x65, 0x22, 0x25, 0xda, 0x41, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x3a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x69, 0x6b, 0x6b, 0x61, 0x68, 0x2f, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x1f, 0x2e, 0x6c,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x6b, 0x6b,
	0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68,
	0x4c, 0x69, 0x6b, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x2f, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x2f, 0x7b,
	0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x78, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x22, 0x2e, 0x6c,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4e,
	0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b,
	0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x2f, 0x6c, 0x69, 0x6b, 0x65,
	0x73, 0x2f, 0x7b, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x8e, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x24, 0x2e, 0x6c, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x69,
	0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x2f, 0x6c, 0x69, 0x6b, 0x65, 0x73,
	0x2f, 0x7b, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x69,
	0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12,
	0x29, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x7b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x6f,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x20, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e,
	0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x7b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x88, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x6c, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x69,
	0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x2a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x69, 0x6b, 0x6b,
	0x61, 0x68, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x7b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x73, 0x0a, 0x0e, 0x45, 0x6e,
	0x64, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x6c,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x4e, 0x69, 0x6b, 0x6b,
	0x61, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4e, 0x69, 0x6b, 0x6b, 0x61,
	0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1f,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2f, 0x7b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6e, 0x64, 0x42,
	0x8a, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x42, 0x12, 0x4e, 0x69, 0x6b, 0x6b, 0x61, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6e, 0x61, 0x64, 0x65, 0x76, 0x2f, 0x6c, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xa2, 0x02, 0x03, 0x4c, 0x58, 0x58,
	0xaa, 0x02, 0x09, 0x4c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0xca, 0x02, 0x09, 0x4c,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0xe2, 0x02, 0x15, 0x4c, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x09, 0x4c, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_nikkah_service_proto_rawDescOnce sync.Once
	file_nikkah_service_proto_rawDescData []byte
)

func file_nikkah_service_proto_rawDescGZIP() []byte {
	file_nikkah_service_proto_rawDescOnce.Do(func() {
		file_nikkah_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nikkah_service_proto_rawDesc), len(file_nikkah_service_proto_rawDesc)))
	})
	return file_nikkah_service_proto_rawDescData
}

var file_nikkah_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_nikkah_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_nikkah_service_proto_goTypes = []any{
	(NikkahProfile_Gender)(0),              // 0: limestone.NikkahProfile.Gender
	(NikkahProfile_BirthDate_Month)(0),     // 1: limestone.NikkahProfile.BirthDate.Month
	(NikkahLike_Status)(0),                 // 2: limestone.NikkahLike.Status
	(NikkahMatch_Status)(0),                // 3: limestone.NikkahMatch.Status
	(*NikkahProfile)(nil),                  // 4: limestone.NikkahProfile
	(*NikkahLike)(nil),                     // 5: limestone.NikkahLike
	(*NikkahMatch)(nil),                    // 6: limestone.NikkahMatch
	(*CreateNikkahProfileRequest)(nil),     // 7: limestone.CreateNikkahProfileRequest
	(*GetSelfNikkahProfileRequest)(nil),    // 8: limestone.GetSelfNikkahProfileRequest
	(*UpdateSelfNikkahProfileRequest)(nil), // 9: limestone.UpdateSelfNikkahProfileRequest
	(*ListNikkahProfilesRequest)(nil),      // 10: limestone.ListNikkahProfilesRequest
	(*ListNikkahProfilesResponse)(nil),     // 11: limestone.ListNikkahProfilesResponse
	(*GetNikkahProfileRequest)(nil),        // 12: limestone.GetNikkahProfileRequest
	(*InitiateNikkahLikeRequest)(nil),      // 13: limestone.InitiateNikkahLikeRequest
	(*GetNikkahLikeRequest)(nil),           // 14: limestone.GetNikkahLikeRequest
	(*CancelNikkahLikeRequest)(nil),        // 15: limestone.CancelNikkahLikeRequest
	(*CompleteNikkahLikeRequest)(nil),      // 16: limestone.CompleteNikkahLikeRequest
	(*CompleteNikkahLikeResponse)(nil),     // 17: limestone.CompleteNikkahLikeResponse
	(*AcceptNikkahMatchInviteRequest)(nil), // 18: limestone.AcceptNikkahMatchInviteRequest
	(*GetNikkahMatchRequest)(nil),          // 19: limestone.GetNikkahMatchRequest
	(*RejectNikkahMatchInviteRequest)(nil), // 20: limestone.RejectNikkahMatchInviteRequest
	(*EndNikkahMatchRequest)(nil),          // 21: limestone.EndNikkahMatchRequest
	(*NikkahProfile_BirthDate)(nil),        // 22: limestone.NikkahProfile.BirthDate
	(*timestamppb.Timestamp)(nil),          // 23: google.protobuf.Timestamp
}
var file_nikkah_service_proto_depIdxs = []int32{
	0,  // 0: limestone.NikkahProfile.gender:type_name -> limestone.NikkahProfile.Gender
	22, // 1: limestone.NikkahProfile.birth_date:type_name -> limestone.NikkahProfile.BirthDate
	23, // 2: limestone.NikkahProfile.create_time:type_name -> google.protobuf.Timestamp
	23, // 3: limestone.NikkahProfile.update_time:type_name -> google.protobuf.Timestamp
	2,  // 4: limestone.NikkahLike.status:type_name -> limestone.NikkahLike.Status
	23, // 5: limestone.NikkahLike.create_time:type_name -> google.protobuf.Timestamp
	23, // 6: limestone.NikkahLike.update_time:type_name -> google.protobuf.Timestamp
	3,  // 7: limestone.NikkahMatch.status:type_name -> limestone.NikkahMatch.Status
	23, // 8: limestone.NikkahMatch.create_time:type_name -> google.protobuf.Timestamp
	23, // 9: limestone.NikkahMatch.update_time:type_name -> google.protobuf.Timestamp
	4,  // 10: limestone.CreateNikkahProfileRequest.profile:type_name -> limestone.NikkahProfile
	4,  // 11: limestone.UpdateSelfNikkahProfileRequest.profile:type_name -> limestone.NikkahProfile
	4,  // 12: limestone.ListNikkahProfilesResponse.profiles:type_name -> limestone.NikkahProfile
	5,  // 13: limestone.InitiateNikkahLikeRequest.like:type_name -> limestone.NikkahLike
	5,  // 14: limestone.CompleteNikkahLikeResponse.like:type_name -> limestone.NikkahLike
	6,  // 15: limestone.CompleteNikkahLikeResponse.match:type_name -> limestone.NikkahMatch
	1,  // 16: limestone.NikkahProfile.BirthDate.month:type_name -> limestone.NikkahProfile.BirthDate.Month
	7,  // 17: limestone.NikkahIoService.CreateNikkahProfile:input_type -> limestone.CreateNikkahProfileRequest
	8,  // 18: limestone.NikkahIoService.GetSelfNikkahProfile:input_type -> limestone.GetSelfNikkahProfileRequest
	9,  // 19: limestone.NikkahIoService.UpdateSelfNikkahProfile:input_type -> limestone.UpdateSelfNikkahProfileRequest
	10, // 20: limestone.NikkahIoService.ListNikkahProfiles:input_type -> limestone.ListNikkahProfilesRequest
	12, // 21: limestone.NikkahIoService.GetNikkahProfile:input_type -> limestone.GetNikkahProfileRequest
	13, // 22: limestone.NikkahIoService.InitiateNikkahLike:input_type -> limestone.InitiateNikkahLikeRequest
	14, // 23: limestone.NikkahIoService.GetNikkahLike:input_type -> limestone.GetNikkahLikeRequest
	15, // 24: limestone.NikkahIoService.CancelNikkahLike:input_type -> limestone.CancelNikkahLikeRequest
	16, // 25: limestone.NikkahIoService.CompleteNikkahLike:input_type -> limestone.CompleteNikkahLikeRequest
	18, // 26: limestone.NikkahIoService.AcceptNikkahMatchInvite:input_type -> limestone.AcceptNikkahMatchInviteRequest
	19, // 27: limestone.NikkahIoService.GetNikkahMatch:input_type -> limestone.GetNikkahMatchRequest
	20, // 28: limestone.NikkahIoService.RejectNikkahMatchInvite:input_type -> limestone.RejectNikkahMatchInviteRequest
	21, // 29: limestone.NikkahIoService.EndNikkahMatch:input_type -> limestone.EndNikkahMatchRequest
	4,  // 30: limestone.NikkahIoService.CreateNikkahProfile:output_type -> limestone.NikkahProfile
	4,  // 31: limestone.NikkahIoService.GetSelfNikkahProfile:output_type -> limestone.NikkahProfile
	4,  // 32: limestone.NikkahIoService.UpdateSelfNikkahProfile:output_type -> limestone.NikkahProfile
	11, // 33: limestone.NikkahIoService.ListNikkahProfiles:output_type -> limestone.ListNikkahProfilesResponse
	4,  // 34: limestone.NikkahIoService.GetNikkahProfile:output_type -> limestone.NikkahProfile
	5,  // 35: limestone.NikkahIoService.InitiateNikkahLike:output_type -> limestone.NikkahLike
	5,  // 36: limestone.NikkahIoService.GetNikkahLike:output_type -> limestone.NikkahLike
	5,  // 37: limestone.NikkahIoService.CancelNikkahLike:output_type -> limestone.NikkahLike
	17, // 38: limestone.NikkahIoService.CompleteNikkahLike:output_type -> limestone.CompleteNikkahLikeResponse
	6,  // 39: limestone.NikkahIoService.AcceptNikkahMatchInvite:output_type -> limestone.NikkahMatch
	6,  // 40: limestone.NikkahIoService.GetNikkahMatch:output_type -> limestone.NikkahMatch
	6,  // 41: limestone.NikkahIoService.RejectNikkahMatchInvite:output_type -> limestone.NikkahMatch
	6,  // 42: limestone.NikkahIoService.EndNikkahMatch:output_type -> limestone.NikkahMatch
	30, // [30:43] is the sub-list for method output_type
	17, // [17:30] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_nikkah_service_proto_init() }
func file_nikkah_service_proto_init() {
	if File_nikkah_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nikkah_service_proto_rawDesc), len(file_nikkah_service_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nikkah_service_proto_goTypes,
		DependencyIndexes: file_nikkah_service_proto_depIdxs,
		EnumInfos:         file_nikkah_service_proto_enumTypes,
		MessageInfos:      file_nikkah_service_proto_msgTypes,
	}.Build()
	File_nikkah_service_proto = out.File
	file_nikkah_service_proto_goTypes = nil
	file_nikkah_service_proto_depIdxs = nil
}
