name: CI/CD for limestone services staging

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

env:
  GO_VERSION: '1.23'
  APP_NAME: limestone
  DOCKER_IMAGE_NAME: limestone-api # Make sure this matches the name you want for your Docker image
  DIGITALOCEAN_REGISTRY: registry.digitalocean.com/limestone-image

jobs:
  tests:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Download Go modules
        run: go mod download

      - name: Run Go unit tests
        run: go test -v ./test/user_repository_test.go

  build:
    name: Build
    needs: tests
    runs-on: ubuntu-latest

    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "TEST_DB_NAME=${{ secrets.TEST_DB_NAME }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "ACCESS_SECRET=${{ secrets.ACCESS_SECRET }}" >> .env
          echo "REFRESH_SECRET=${{ secrets.REFRESH_SECRET }}" >> .env
          echo "ACCESS_EXPIRATION=${{ secrets.ACCESS_EXPIRATION }}" >> .env
          echo "REFRESH_EXPIRATION=${{ secrets.REFRESH_EXPIRATION }}" >> .env

        working-directory: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DIGITALOCEAN_REGISTRY }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:v1.0.0
            ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest

    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Prepare .env content for Droplet
        id: env_content
        run: |
          ENV_VARS_RAW=$(echo "DEBUG=${{ secrets.DEBUG }}"
          echo "TEST_DB_NAME=${{ secrets.TEST_DB_NAME }}"
          echo "DB_HOST=${{ secrets.DB_HOST }}"
          echo "DB_PORT=${{ secrets.DB_PORT }}"
          echo "DB_USER=${{ secrets.DB_USER }}"
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
          echo "DB_NAME=${{ secrets.DB_NAME }}"
          echo "ACCESS_SECRET=${{ secrets.ACCESS_SECRET }}"
          echo "REFRESH_SECRET=${{ secrets.REFRESH_SECRET }}"
          echo "ACCESS_EXPIRATION=${{ secrets.ACCESS_EXPIRATION }}"
          echo "REFRESH_EXPIRATION=${{ secrets.REFRESH_EXPIRATION }}"
          )
          echo "ENV_FILE_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$ENV_VARS_RAW" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Deploy Docker Image to Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login ${{ env.DIGITALOCEAN_REGISTRY }} --username ${{ secrets.DIGITALOCEAN_USERNAME }} --password-stdin

            IMAGE_TAG="${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:v1.0.0"
            CONTAINER_NAME="${{ env.APP_NAME }}"

            if docker ps -a --format '{{.Names}}' | grep -q "${CONTAINER_NAME}"; then
              echo "Stopping existing container ${CONTAINER_NAME}..."
              docker stop "${CONTAINER_NAME}"
              echo "Removing existing container ${CONTAINER_NAME}..."
              docker rm "${CONTAINER_NAME}"
            fi

            echo "Pulling Docker image: ${IMAGE_TAG}..."
            docker pull "${IMAGE_TAG}"

            echo "Creating .env file on Droplet..."
            cat << 'EOF_ENV' > /tmp/.env
            ${{ steps.env_content.outputs.ENV_FILE_CONTENT }}
            EOF_ENV

            echo "Running new container ${CONTAINER_NAME}..."
            docker run -d \
              --name "${CONTAINER_NAME}" \
              --restart always \
              --env-file /tmp/.env \
              -p 80:8080 \
              -p 8081:8081 \
              "${IMAGE_TAG}"

            rm /tmp/.env

            echo "Deployment to Droplet complete!"